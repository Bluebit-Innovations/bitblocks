name: Validate GitHub and GitLab CI/CD Templates

on:
  push:
    branches:
      - main
      - ore/terraform-gh-action
    # paths:
    #   - "bit-blocks-starter/cicd-pipelines/**"
  # pull_request:

jobs:
  validate-github-actions:
    name: Validate GitHub Actions (actionlint)
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🎨 Install actionlint
        run: |
          echo "🔽 Downloading actionlint binary..."
          uname -m
          VERSION=$(curl -s https://api.github.com/repos/rhysd/actionlint/releases/latest | jq -r '.tag_name')
          echo "⬇️ Downloading actionlint version $VERSION..."

          curl -sSL -o actionlint.tar.gz "https://github.com/rhysd/actionlint/releases/download/${VERSION}/actionlint_${VERSION#v}_linux_amd64.tar.gz"
          tar -xzf actionlint.tar.gz
          chmod +x actionlint
          sudo mv actionlint /usr/local/bin/
          actionlint --version


      - name: 🔍 Run actionlint with color
        run: |
          echo "🔍 Scanning GitHub Actions templates..."
          find bit-blocks-starter/cicd-pipelines/github-actions -type f -name "*.yml" | while read -r file; do
            echo -e "\033[1;36m🔎 Checking:\033[0m $file"
            actionlint -color "$file"
          done
  validate-gitlab-ci:
    name: Validate GitLab CI Templates
    runs-on: ubuntu-latest
    env:
      GITLAB_REPO: bluebit2/ghaction-gitlab-template-linter  # 🔁 Replace with your GitLab repo path
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Install glab CLI
        run: |
          sudo apt update
          sudo apt install -y glab
          glab --version

      - name: 🔐 Configure glab authentication
        run: |
          mkdir -p ~/.config/glab-cli
          cat <<EOF > ~/.config/glab-cli/config.yml
          hosts:
            gitlab.com:
              token: $GITLAB_TOKEN
          EOF
      - name: 📅 Clone GitLab repo for CI template linting
        run: |

          git clone https://oauth2:${GITLAB_TOKEN}@gitlab.com/${GITLAB_REPO}.git gitlab-ci-lint
          cd gitlab-ci-lint

          git config user.name "BitBlocks Lint Bot"
          git config user.email "ci-lint@bitblocks.dev"

      - name: 🔍 Lint GitLab CI templates
        run: |
          ls ../bit-blocks-starter/
          # Confirm the directory exists
          if [ ! -d "../bit-blocks-starter/cicd-pipelines/gitlab/" ]; then
            echo -e "\033[1;31m❌ Directory not found:\033[0m ../bit-blocks-starter/cicd-pipelines/gitlab/"
            exit 1
          fi

          # Confirm there are files in the directory
          if [ -z "$(ls -A ../bit-blocks-starter/cicd-pipelines/gitlab/*.yml 2>/dev/null)" ]; then
            echo -e "\033[1;31m❌ No YAML files found in:\033[0m ../bit-blocks-starter/cicd-pipelines/gitlab/"
            exit 1
          fi
          cd gitlab-ci-lint
          for file in ../bit-blocks-starter/cicd-pipelines/gitlab/*.yml; do
          filename=$(basename "$file")
          template_path="templates/$filename"
          branch_name="lint-${filename//.yml/}-$(date +%s)"

          echo -e "\033[1;36m🔍 Linting Template:\033[0m $filename"

          git checkout -b "$branch_name"

          # Create templates/ and copy current file
          mkdir -p templates
          cp "$file" "$template_path"
          # Replace .gitlab-ci.yml with reference to this template
          cat <<EOF > .gitlab-ci.yml
          variables:
            TEMPLATE_FILE: "$template_path"

          stages:
            - validate

          include:
            - local: "\$TEMPLATE_FILE"
          EOF

          git add .gitlab-ci.yml "$template_path"
          git commit -m "Lint test for $filename"
          git push origin "$branch_name"

          echo "$GITLAB_TOKEN" | glab auth login --stdin

          echo -e "\n🧲 Running glab ci lint..."
          if glab ci lint; then
            echo -e "\033[1;32m✔ Passed:\033[0m $filename"
          else
            echo -e "\033[1;31m❌ Failed:\033[0m $filename"
          fi

          # Clean up test branch
          git push origin --delete "$branch_name" || true
          git checkout main || git checkout master
          done

      - name: 🗑️ Clean up
        run: |
          echo "Cleaning up..."